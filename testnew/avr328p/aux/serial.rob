
/* USART0 control status register A */
register int8 UCSR0A at 0xc0 {
    bool MPCM0;
    bool U2X0;
    bool UPE0;
    bool DOR0;
    bool FE0;
    bool UDRE0;
    bool TXC0;
    bool RXC0;
}

/* USART0 control status register B */
register int8 UCSR0B at 0xc1 {
    bool TXB80;
    bool RXB80;
    bool UCSZ02;
    bool TXEN0;
    bool RXEN0;
    bool UDRIE0;
    bool TXCIE0;
    bool RXCIE0;
}

/* USART0 control status register C */
register int8 UCSR0C at 0xc2 {
    bool UCPOL0;
    int8 UCSZ0: 2;
    bool USBS0;
    int8 UPM0: 2;
    int8 UMSEL0: 2;
}

/* USART0 baud rate register, 12 bits*/
register int16 UBRR0 at 0xc4;

/* USART0 byte to send/received */
register int8 UDR0 at 0xc6;

type avr5_serial {

    void start(mcu m, int32 baud_rate) {
        // set baudrate
        UBRR0 = int16(((m.clock() / (8 * baud_rate)) -1));
    
        // use 2x
        UCSR0A.U2X0 = true;
    
        // 8 bit
        UCSR0B.UCSZ02 = false;
        UCSR0C.UCSZ0 = 0x3;
    
        // no parity
        UCSR0C.UPM0 = 0x0;
    
        // 1 stop bit
        UCSR0C.USBS0 = false;
    
        UCSR0B.RXEN0 = true;
        UCSR0B.TXEN0 = true;
    }

    void write(int8 c) {
        while UCSR0A.UDRE0 == false;
        UDR0 = c;
    }

    int8 read() {
        while UCSR0A.RXC0 == false;
        return UDR0;    
    }
    
    bool has_data() {
        return UCSR0A.RXC0;
    }
        
}

