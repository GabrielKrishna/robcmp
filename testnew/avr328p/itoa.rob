
chars = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};

result = {0:18};

void itoa(int16 value, int8 base) {
	if base < 2 or base > 16 {
		result[0] = 0;
		return;
	}

	negative = false;
	if value < 0 {
		negative = true;
		value = - value;
	}
	
	i = 0;
	if value == 0 {
		result[i] = '0';
		i++;
	} else {
		while value != 0 {
			temp = value;
			value /= base;
			result[i] = chars[temp - value * base];
			//result[i] = chars[value % base];
			//value /= base;
			i++;
		}
	}

	if negative == true {
		result[i] = '-';
		i++;
	}
	result[i] = 0;
	
	// reverse result
	j = 0;
	i--;
	while j < i {
		temp = result[j];
		result[j] = result[i];
		result[i] = temp;
		j++;
		i--;
	}
}

numbers = {-32123, -15678, -4364, -501, -25, 0, 25, 512, 4364, 15678, 32767};

base10 = {
  {'-', '3', '2', '1', '2', '3', 0},
  {'-', '1', '5', '6', '7', '8', 0},
  {'-', '4', '3', '6', '4',  0 , 0},
  {'-', '5', '0', '1',  0 ,  0 , 0},
  {'-', '2', '5',  0 ,  0 ,  0 , 0},
  {'0',  0 ,  0 ,  0 ,  0 ,  0 , 0},
  {'2', '5',  0 ,  0 ,  0 ,  0 , 0},
  {'5', '1', '2',  0 ,  0 ,  0 , 0},
  {'4', '3', '6', '4',  0 ,  0 , 0},
  {'1', '5', '6', '7', '8',  0 , 0},
  {'3', '2', '7', '6', '7',  0 , 0}
};

base16 = {
  {'-', '7', 'd', '7', 'b', 0},
  {'-', '3', 'd', '3', 'e', 0},
  {'-', '1', '1', '0', 'c', 0},
  {'-', '1', 'f', '5',  0 , 0},
  {'-', '1', '9',  0 ,  0 , 0},
  {'0',  0 ,  0 ,  0 ,  0 , 0},
  {'1', '9',  0 ,  0 ,  0 , 0},
  {'2', '0', '0',  0 ,  0 , 0},
  {'1', '1', '0', 'c',  0 , 0},
  {'3', 'd', '3', 'e',  0 , 0},
  {'7', 'f', 'f', 'f',  0 , 0}
};

bool check10(int8 id) {
	ret = true;
	i = 0;
	while result[i] != 0 and ret == true {
		if result[i] != base10[id][i] {
			ret = false;
		}
		i++;
	}
	return ret;
}

bool check16(int8 id) {
	ret = true;
	i = 0;
	while result[i] != 0 and ret == true {
		if result[i] != base16[id][i] {
			ret = false;
		}
		i++;
	}
	return ret;
}

void sleep_cpu();

int16 main() {
	ret = true;
	i = 0;
	while i < numbers.size and ret == true {
		itoa(numbers[i], 10);
		ret = check10(i);
		if ret == true {
			itoa(numbers[i], 16);
			ret = check16(i);
		}
		i++;
	}

	sleep_cpu();
	
	if ret == true {
		return 0;
	} else {
		return 1;
	}
}

